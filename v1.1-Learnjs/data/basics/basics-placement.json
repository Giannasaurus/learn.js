{
    "title": "Placement",
    "sections": [
        {
            "type": "heading-2",
            "text": "üó∫Ô∏è Introduction: Finding JavaScript's Home"
        },
        {
            "type": "text",
            "content": "Welcome to our exploration of JavaScript placement! Where you put your JavaScript code matters just as much as how you write it. In this module, we'll discover all the different places JavaScript can live, how it gets loaded, and the best practices for optimal performance and organization. Let's find the perfect home for your code!"
        },
        {
            "type": "heading-2",
            "text": "üè† JavaScript's Many Homes"
        },
        {
            "type": "heading-3",
            "text": "üèóÔ∏è Inline JavaScript: The Direct Approach"
        },
        {
            "type": "text",
            "content": "JavaScript can live directly within your HTML using the <script> tag:"
        },
        {
            "type": "code-block",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Inline JavaScript Example</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    \n    <!-- Inline script in the body -->\n    <script>\n        // This JavaScript code lives directly in the HTML\n        document.addEventListener('DOMContentLoaded', function() {\n            document.querySelector('h1').style.color = 'blue';\n            console.log('Page loaded and heading turned blue!');\n        });\n    </script>\n</body>\n</html>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé™ Fun Fact: ",
            "content": "In the early days of the web, almost all JavaScript was written inline! Websites from the 1990s were filled with tiny script tags scattered throughout the HTML."
        },
        {
            "type": "heading-3",
            "text": "üìÑ External JavaScript Files: The Organized Approach"
        },
        {
            "type": "text",
            "content": "JavaScript can also live in separate .js files, linked to your HTML:"
        },
        {
            "type": "code-block",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>External JavaScript Example</title>\n    \n    <!-- External script in the head -->\n    <script src=\"styles.js\"></script>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    \n    <!-- External script at the end of body -->\n    <script src=\"app.js\"></script>\n</body>\n</html>",
            "language": "js"
        },
        {
            "type": "text",
            "content": "And in your app.js file:"
        },
        {
            "type": "code-block",
            "code": "// This JavaScript lives in its own file\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.querySelector('h1').style.color = 'green';\n    console.log('Page loaded from external file!');\n});",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé≠ External File Benefits: ",
            "content": "Better organization and maintenance,\nBrowser caching (load once, use many times),\nSeparation of concerns (structure vs. behavior),\nEasier collaboration among team members"
        },
        {
            "type": "heading-3",
            "text": "üé≠ Event Attributes: The Direct Connection"
        },
        {
            "type": "text",
            "content": "JavaScript can be directly attached to HTML elements as event attributes:"
        },
        {
            "type": "code-block",
            "code": "<button onclick=\"alert('Button clicked!')\">Click Me</button>\n\n<a href=\"#\" onmouseover=\"this.style.color='red'\" onmouseout=\"this.style.color='blue'\">\n    Hover over me!\n</a>\n\n<input type=\"text\" onchange=\"console.log('Input changed to: ' + this.value)\">",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé° Attribute Trivia: ",
            "content": "While convenient for quick demos, inline event attributes mix HTML and JavaScript, which goes against modern separation of concerns principles. Most developers avoid this approach for production code!"
        },
        {
            "type": "heading-3",
            "text": "üîó JavaScript URLs: The Clickable Code"
        },
        {
            "type": "text",
            "content": "JavaScript can even be used in URLs (though rarely recommended):"
        },
        {
            "type": "code-block",
            "code": "<!-- The javascript: protocol executes code when clicked -->\n<a href=\"javascript:alert('Link clicked!')\">Click for JavaScript</a>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "‚ö†Ô∏è Warning: ",
            "content": "JavaScript URLs are generally considered bad practice and can pose security risks. They're also not compatible with modern Content Security Policies."
        },
        {
            "type": "heading-2",
            "text": "üï∞Ô∏è Timing is Everything: Script Loading Strategies"
        },
        {
            "type": "heading-3",
            "text": "‚è≥ Traditional Loading: The Classic Approach"
        },
        {
            "type": "text",
            "content": "By default, scripts block HTML parsing and execute immediately when encountered:"
        },
        {
            "type": "code-block",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Traditional Loading</title>\n    <script src=\"analytics.js\"></script> <!-- Blocks parsing while loading -->\n</head>\n<body>\n    <!-- HTML parsing pauses until the script is loaded and executed -->\n    <h1>Page Content</h1>\n    <script src=\"app.js\"></script> <!-- Blocks again -->\n    <p>More content...</p>\n</body>\n</html>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé™ Loading Fun Fact: ",
            "content": "In the scenario above, if analytics.js takes 3 seconds to load, the user will see a blank page for those 3 seconds! This is why script placement matters so much."
        },
        {
            "type": "heading-3",
            "text": "üöÄ Async Loading: The Independent Approach"
        },
        {
            "type": "text",
            "content": "The async attribute loads scripts asynchronously without blocking HTML parsing:"
        },
        {
            "type": "code-block",
            "code": "<head>\n    <title>Async Loading</title>\n    <!-- Will load in parallel with HTML parsing and execute as soon as it's available -->\n    <script src=\"analytics.js\" async></script>\n</head>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé° Async Quirk: ",
            "content": "Async scripts execute as soon as they're downloaded, which means they might run in an unpredictable order! If script B depends on script A, but B downloads faster, you could have problems."
        },
        {
            "type": "heading-3",
            "text": "üîÑ Defer Loading: The Patient Approach"
        },
        {
            "type": "text",
            "content": "The defer attribute loads scripts in parallel but executes them in order after HTML parsing:"
        },
        {
            "type": "code-block",
            "code": "<head>\n    <title>Defer Loading</title>\n    <!-- Will load in parallel with HTML parsing but execute after parsing in order -->\n    <script src=\"utilities.js\" defer></script>\n    <script src=\"app.js\" defer></script> <!-- Guaranteed to run after utilities.js -->\n</head>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé≠ Defer Drama: ",
            "content": "The defer attribute has been around since Internet Explorer 4, but it wasn't until HTML5 standardized its behavior that it became reliable across browsers!"
        },
        {
            "type": "heading-3",
            "text": "üìä Visual Comparison of Loading Strategies"
        },
        {
            "type": "code-block",
            "code": "Traditional: ---|Script A|---|Script B|---|HTML Parsing|---\u2192\nAsync:      ------|HTML Parsing|------------\u2192\n             --|Script A|--\u21B7\n                  --|Script B|--\u21B7\n                     (Execute when ready)\n             \nDefer:      ------|HTML Parsing|------------\u2192\n             --|Script A|----------\u21B7\n                --|Script B|--------\u21B7\n                              (Execute in order)",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé™ Performance Contest: ",
            "content": "In most modern websites, defer is the winner for critical scripts that need to run in a specific order, while async works great for independent scripts like analytics."
        },
        {
            "type": "heading-2",
            "text": "üìã Script Attributes: Fine-Tuning Your Placement"
        },
        {
            "type": "heading-3",
            "text": "üîí Type Attribute: Declaring Your Intentions"
        },
        {
            "type": "code-block",
            "code": "<!-- Traditional JavaScript -->\n<script type=\"text/javascript\">\n    console.log(\"Hello world!\");\n</script>\n\n<!-- Modern approach - type attribute is optional in HTML5 -->\n<script>\n    console.log(\"Hello modern world!\");\n</script>\n\n<!-- JavaScript modules (ES6) -->\n<script type=\"module\">\n    import { greeting } from './greetings.js';\n    console.log(greeting);\n</script>\n\n<!-- Non-executable JavaScript (for templates) -->\n<script type=\"text/x-template\" id=\"user-template\">\n    <div class=\"user\">\n        <h2>{{name}}</h2>\n        <p>{{bio}}</p>\n    </div>\n</script>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé° Type Fun: ",
            "content": "The type=\"module\" attribute not only enables ES6 import/export syntax but also automatically defers script execution and applies strict mode!"
        },
        {
            "type": "heading-3",
            "text": "üåê Language and Character Encoding"
        },
        {
            "type": "code-block",
            "code": "<!-- Legacy attribute, no longer needed in HTML5 -->\n<script language=\"JavaScript\">\n    alert(\"This attribute is deprecated!\");\n</script>\n\n<!-- Character encoding (rarely needed now) -->\n<script charset=\"UTF-8\" src=\"localized-script.js\"></script>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé™ Language History: ",
            "content": "The language attribute is a relic from the browser wars of the 1990s, when different browsers supported different JavaScript versions or alternatives like VBScript!"
        },
        {
            "type": "heading-3",
            "text": "üõ†Ô∏è Additional Attributes for Fine Control"
        },
        {
            "type": "code-block",
            "code": "<!-- Cross-origin loading (for scripts from other domains) -->\n<script src=\"https://cdn.example.com/library.js\" \n        crossorigin=\"anonymous\"></script>\n\n<!-- Integrity check (security feature) -->\n<script src=\"https://cdn.example.com/framework.js\"\n        integrity=\"sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/u...\"\n        crossorigin=\"anonymous\"></script>\n\n<!-- Do not block rendering for non-critical script -->\n<script src=\"analytics.js\" fetchpriority=\"low\" async></script>\n\n<!-- Referrer policy -->\n<script src=\"third-party.js\" referrerpolicy=\"no-referrer\"></script>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé≠ Security Theater: ",
            "content": "The combination of integrity and crossorigin attributes creates a security feature called Subresource Integrity (SRI), which ensures the CDN can't serve malicious code!"
        },
        {
            "type": "heading-2",
            "text": "üßô‚Äç‚ôÇÔ∏è Dynamic Script Loading: JavaScript Creating JavaScript"
        },
        {
            "type": "heading-3",
            "text": "üéÅ The DOM Method: Creating Script Elements"
        },
        {
            "type": "code-block",
            "code": "function loadScript(url, callback) {\n    const script = document.createElement('script');\n    script.src = url;\n    script.onload = callback;\n    document.head.appendChild(script);\n}\n\nloadScript('https://cdn.example.com/library.js', function() {\n    console.log('Script loaded successfully!');\n    library.initialize();\n});",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé™ Dynamic Loading Fun: ",
            "content": "This technique powers many \"lazy loading\" implementations, where scripts are only loaded when needed, saving bandwidth and improving initial page load times!"
        },
        {
            "type": "heading-3",
            "text": "‚ö° The Import Method: Modern Dynamic Imports"
        },
        {
            "type": "code-block",
            "code": "document.querySelector('#load-feature').addEventListener('click', async () => {\n    try {\n        const featureModule = await import('./features/cool-feature.js');\n        featureModule.initialize();\n        console.log('Feature loaded and initialized!');\n    } catch (error) {\n        console.error('Failed to load feature:', error);\n    }\n});",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé° Import Magic: ",
            "content": "Dynamic imports are part of modern JavaScript and return a Promise, making them perfect for conditional loading of features!"
        },
        {
            "type": "heading-2",
            "text": "üé≠ Fun JavaScript Injection Methods"
        },
        {
            "type": "heading-3",
            "text": "üéÆ The Bookmarklet: Pocket JavaScript"
        },
        {
            "type": "text",
            "content": "Bookmarklets are bookmarks containing JavaScript that can be executed on any page:"
        },
        {
            "type": "code-block",
            "code": "// A simple bookmarklet that makes the page editable\njavascript:(function(){\n    document.body.contentEditable = true;\n    document.designMode = 'on';\n    alert('Page is now editable! Click anywhere and start typing.');\n})();",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé™ Bookmarklet History: ",
            "content": "Before browser extensions became popular, bookmarklets were the primary way to extend browser functionality. Some popular services like Pinterest started as bookmarklets!"
        },
        {
            "type": "heading-3",
            "text": "üîÆ The Console Magician: Developer Tools"
        },
        {
            "type": "text",
            "content": "JavaScript can be typed directly into browser developer tools:"
        },
        {
            "type": "code-block",
            "code": "// Open your browser's console and type:\ndocument.querySelectorAll('img').forEach(img => {\n    img.style.transform = 'rotate(180deg)';\n});",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé° Console Trick: ",
            "content": "Try entering document.designMode = 'on' in your browser console on any website to make the entire page editable!"
        },
        {
            "type": "heading-3",
            "text": "üìú The Scriptless Script: Using Data URIs"
        },
        {
            "type": "code-block",
            "code": "<a href=\"data:text/html,<script>alert('Hello from data URI!');</script>\">\n    Click to run script\n</a>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé≠ Data URI Drama: ",
            "content": "Modern browsers have restricted what can be done with data URIs for security reasons, but they were once a clever hack for creating self-contained HTML+JS snippets!"
        },
        {
            "type": "heading-2",
            "text": "üè¢ Architectural Placement: Organizing Your JavaScript"
        },
        {
            "type": "heading-3",
            "text": "üìö Common JavaScript Architectures"
        },
        {
            "type": "heading-4",
            "text": "The Traditional Approach"
        },
        {
            "type": "code-block",
            "code": "website/\\n‚îú‚îÄ‚îÄ index.html\\n‚îú‚îÄ‚îÄ css/\\n‚îÇ   ‚îî‚îÄ‚îÄ styles.css\\n‚îî‚îÄ‚îÄ js/\\n    ‚îú‚îÄ‚îÄ main.js\\n    ‚îú‚îÄ‚îÄ utils.js\\n    ‚îî‚îÄ‚îÄ vendors/\\n        ‚îú‚îÄ‚îÄ jquery.min.js\\n        ‚îî‚îÄ‚îÄ bootstrap.min.js",
            "language": "js"
        },
        {
            "type": "heading-4",
            "text": "The Component-Based Approach"
        },
        {
            "type": "code-block",
            "code": "website/\n‚îú‚îÄ‚îÄ index.html\n‚îî‚îÄ‚îÄ components/\n    ‚îú‚îÄ‚îÄ header/\n    ‚îÇ   ‚îú‚îÄ‚îÄ header.js\n    ‚îÇ   ‚îú‚îÄ‚îÄ header.css\n    ‚îÇ   ‚îî‚îÄ‚îÄ header.html\n    ‚îú‚îÄ‚îÄ carousel/\n    ‚îÇ   ‚îú‚îÄ‚îÄ carousel.js\n    ‚îÇ   ‚îú‚îÄ‚îÄ carousel.css\n    ‚îÇ   ‚îî‚îÄ‚îÄ carousel.html\n    ‚îî‚îÄ‚îÄ footer/\n        ‚îú‚îÄ‚îÄ footer.js\n        ‚îú‚îÄ‚îÄ footer.css\n        ‚îî‚îÄ‚îÄ footer.html",
            "language": "js"
        },
        {
            "type": "heading-4",
            "text": "The Modern Build-System Approach"
        },
        {
            "type": "code-block",
            "code": "project/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ index.js       # Entry point\n‚îÇ   ‚îú‚îÄ‚îÄ components/    # React/Vue/etc components\n‚îÇ   ‚îú‚îÄ‚îÄ utils/         # Helper functions\n‚îÇ   ‚îî‚îÄ‚îÄ assets/        # Images, fonts, etc.\n‚îú‚îÄ‚îÄ dist/              # Generated by build process\n‚îÇ   ‚îú‚îÄ‚îÄ bundle.js      # All JS combined and optimized\n‚îÇ   ‚îî‚îÄ‚îÄ index.html     # With proper script tags\n‚îú‚îÄ‚îÄ package.json       # Dependencies and scripts\n‚îî‚îÄ‚îÄ webpack.config.js  # Build configuration",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé™ Architecture Fun: ",
            "content": "The evolution of JavaScript architecture reflects the evolution of the web itself‚Äîfrom simple document enhancements to full-fledged applications!"
        },
        {
            "type": "heading-3",
            "text": "üß† Smart Placement Strategies"
        },
        {
            "type": "heading-4",
            "text": "The Load-Critical vs. Enhance Pattern"
        },
        {
            "type": "code-block",
            "code": "<head>\n    &lt;!-- Critical CSS for above-the-fold content --&gt;\n    <style>/* Critical styles */</style>\n    \n    &lt;!-- Only the JavaScript absolutely needed for first render --&gt;\n    <script src=\"critical.js\" defer></script>\n</head>\n<body>\n    <main>&lt;!-- Content here --&gt;</main>\n    \n    &lt;!-- Enhancement scripts loaded after critical content --&gt;\n    <script src=\"enhancements.js\" defer></script>\n    \n    &lt;!-- Analytics and other non-critical scripts --&gt;\n    <script src=\"analytics.js\" async></script>\n</body>\n</html>",
            "language": "js"
        },
        {
            "type": "heading-4",
            "text": "The Progressive Enhancement Pattern"
        },
        {
            "type": "code-block",
            "code": "<!-- Base functionality with no JavaScript -->\n<a href=\"/product/checkout\" class=\"button\">Add to Cart</a>\n\n<!-- Enhance with JavaScript when available -->\n<script>\n    document.addEventListener('DOMContentLoaded', function() {\n        // Find all \"Add to Cart\" buttons\n        document.querySelectorAll('.button').forEach(function(button) {\n            button.addEventListener('click', function(event) {\n                event.preventDefault();\n                // Use Ajax to add to cart without page refresh\n                addToCartAsync(this.href.split('/').pop());\n                // Show animation\n                showAddedToCartAnimation();\n            });\n        });\n    });\n</script>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé≠ Progressive Enhancement Philosophy: ",
            "content": "\"Start with HTML that works without JavaScript, then enhance the experience for users who have JavaScript enabled.\" This approach ensures your site is resilient and accessible!"
        },
        {
            "type": "heading-2",
            "text": "‚ö° Performance Implications of Placement"
        },
        {
            "type": "heading-3",
            "text": "üìä The Critical Rendering Path"
        },
        {
            "type": "code-block",
            "code": "1. HTML ‚Üí 2. DOM ‚Üí 3. CSSOM ‚Üí 4. Render Tree ‚Üí 5. Layout ‚Üí 6. Paint",
            "language": "js"
        },
        {
            "type": "text",
            "content": "JavaScript can block this path at step 2 (DOM construction) if not placed correctly!"
        },
        {
            "type": "heading-3",
            "text": "üèéÔ∏è Speed Impact of Different Placements"
        },
        {
            "type": "table",
            "headers": ["Placement Method", "First Paint", "Total Load", "User Experience"],
            "rows": [
                ["<script> in <head>", "Slow", "Medium", "Poor (blank page while loading)"],
                ["<script> at end of <body>", "Fast", "Medium", "Better (content appears before scripts)"],
                ["<script async> in <head>", "Medium", "Fast", "Mixed (layout shifts possible)"],
                ["<script defer> in <head>", "Fast", "Fast", "Good (predictable, no blocking)"],
                ["Dynamic loading on demand", "Fastest", "Fastest", "Best (only loads what's needed)"]
            ]
        },
        {
            "type": "blockquote",
            "text": "üé™ Performance Wisdom: ",
            "content": "\"The fastest JavaScript is the JavaScript not sent to the browser.\" Always ask if you really need that script!"
        },
        {
            "type": "heading-2",
            "text": "üõ°Ô∏è Security Considerations in Script Placement"
        },
        {
            "type": "heading-3",
            "text": "üîí Content Security Policy (CSP)"
        },
        {
            "type": "code-block",
            "code": "<!-- In the HTML head -->\n<meta http-equiv=\"Content-Security-Policy\" \n      content=\"script-src 'self' https://trusted-cdn.com\">",
            "language": "js"
        },
        {
            "type": "text",
            "content": "Or as an HTTP header:"
        },
        {
            "type": "code-block",
            "code": "Content-Security-Policy: script-src 'self' https://trusted-cdn.com",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé≠ CSP Drama: ",
            "content": "Content Security Policy can block inline scripts completely! This is why many frameworks now avoid generating inline scripts and prefer external files with proper CSP hashes or nonces."
        },
        {
            "type": "heading-3",
            "text": "üõë The Dangers of Inline Scripts"
        },
        {
            "type": "text",
            "content": "Inline scripts are vulnerable to Cross-Site Scripting (XSS) attacks:"
        },
        {
            "type": "code-block",
            "code": "<!-- Vulnerable code -->\n<script>\n    // This builds HTML from URL parameters - DANGEROUS!\n    document.querySelector('#greeting').innerHTML = \n        'Hello, ' + new URLSearchParams(window.location.search).get('name');\n</script>\n\n<!-- If a user visits with ?name=<script>stealCookies()</script>, the malicious \n     script would execute in the context of your page! -->",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "‚ö†Ô∏è Security Tip: ",
            "content": "Always prefer external scripts over inline when handling any kind of user input or dynamic data to reduce XSS risks."
        },
        {
            "type": "heading-2",
            "text": "üß™ Testing Your JavaScript Placement"
        },
        {
            "type": "heading-3",
            "text": "üì± The Mobile-First Test"
        },
        {
            "type": "ordered-list",
            "items": [
                " Enable throttling in Chrome DevTools (slow 3G)",
                " Reload your page and watch the performance timeline",
                " If your page takes >2 seconds to become interactive, revisit your script placement"
            ]
        },
        {
            "type": "heading-3",
            "text": "üîç The Waterfall Analysis"
        },
        {
            "type": "image",
            "src": "../assets/content-unavailable.png"
        },
        {
            "type": "blockquote",
            "text": "üé° Waterfall Fun: ",
            "content": "Browser DevTools can visualize exactly how your scripts load in relation to each other and the rest of your page content. Look for \"blocking\" scripts that cause long horizontal bars!"
        },
        {
            "type": "heading-2",
            "text": "üèÜ Best Practices for JavaScript Placement"
        },
        {
            "type": "heading-3",
            "text": "üìú The Golden Rules"
        },
        {
            "type": "ordered-list",
            "items": [
                " Defer non-critical scripts - Use defer for scripts that aren't needed for initial rendering",
                " Minimize script size - Smaller scripts load faster and block less",
                " Reduce script dependencies - Every dependency is another potential delay",
                " Load locally when possible - Third-party CDNs can fail or be slow",
                " Use async for independent scripts - Analytics, tracking, and other standalone functionality",
                " Put render-blocking scripts in the head with defer - For predictable loading",
                " Dynamically load features - Load scripts only when they're needed",
                " Bundle wisely - Too many small scripts cause connection overhead, but giant bundles delay interactivity"
            ]
        },
        {
            "type": "blockquote",
            "text": "üé™ Rule of Thumb: ",
            "content": "\"Load what you need when you need it, and no sooner.\""
        },
        {
            "type": "heading-3",
            "text": "üåü Advanced Optimization Techniques"
        },
        {
            "type": "heading-4",
            "text": "Preloading Critical Scripts"
        },
        {
            "type": "code-block",
            "code": "<head>\n    <!-- Tell the browser to download this early, but not execute yet -->\n    <link rel=\"preload\" href=\"critical-feature.js\" as=\"script\">\n    \n    <!-- It will be executed when this tag is reached -->\n    <script src=\"critical-feature.js\" defer></script>\n</head>",
            "language": "js"
        },
        {
            "type": "heading-4",
            "text": "Code Splitting and Lazy Loading"
        },
        {
            "type": "code-block",
            "code": "// Modern bundlers enable splitting code into chunks\nimport('./features/user-profile.js')\n    .then(module => {\n        module.initializeProfile();\n    });",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé≠ Optimization Drama: ",
            "content": "Some developers take script optimization to extreme levels, like inlining critical JavaScript directly in the HTML for the first paint, then loading everything else asynchronously!"
        },
        {
            "type": "heading-2",
            "text": "üéÆ Fun Exercise: Script Placement Detective"
        },
        {
            "type": "text",
            "content": "Look at this HTML and spot the script placement issues:"
        },
        {
            "type": "code-block",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Script Detective</title>\n    <script src=\"huge-library.js\"></script>\n    <script>\n        document.getElementById('main-title').style.color = 'blue';\n    </script>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1 id=\"main-title\">Welcome to My Site</h1>\n    \n    <script src=\"analytics.js\"></script>\n    \n    <main>\n        <p>Important content here!</p>\n    </main>\n    \n    <script>\n        document.write('<p>Generated at: ' + new Date() + '</p>');\n    </script>\n    \n    <script src=\"important-functionality.js\"></script>\n</body>\n</html>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé™ Problems to Find: ",
            "content": [
                {
                    "type": "ordered-list",
                    "ordered": true,    
                    "items": [
                        " huge-library.js blocks rendering and should be deferred",
                        " First inline script tries to access an element that doesn't exist yet",
                        " Analytics script interrupts the page content flow",
                        " document.write is slow and can cause reflows",
                        " Critical functionality is loaded at the end of the body"
                    ]
                }
            ]
        },
        {
            "type": "heading-2",
            "text": "üåü The Grand Finale: A Perfect Script Placement Template"
        },
        {
            "type": "code-block",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Perfect Script Placement</title>\n    \n    <link rel=\"preload\" href=\"critical.js\" as=\"script\">\n    \n    <style>\n        body { font-family: sans-serif; margin: 0; padding: 20px; }\n        .hero { height: 80vh; display: flex; align-items: center; justify-content: center; }\n    </style>\n    \n    <script>\n        if (!('fetch' in window)) {\n            document.write('<script src=\"polyfills/fetch.js\" defer><\\/script>');\n        }\n        document.documentElement.classList.add('js-enabled');\n    </script>\n    \n    <script src=\"critical.js\" defer></script>\n    <script src=\"app.js\" defer></script>\n</head>\n<body>\n    <header>\n        <h1>My Amazing Website</h1>\n    </header>\n    \n    <main>\n        <section class=\"hero\">\n            <h2>Welcome!</h2>\n        </section>\n    </main>\n    \n    <footer>\n        <p>¬© 2025 JavaScript Placement Experts</p>\n    </footer>\n    \n    <script src=\"analytics.js\" async></script>\n    \n    <script>\n        let commentsLoaded = false;\n        window.addEventListener('scroll', function() {\n            if (!commentsLoaded && window.scrollY > 500) {\n                commentsLoaded = true;\n                const script = document.createElement('script');\n                script.src = 'features/comments.js';\n                document.body.appendChild(script);\n            }\n        });\n    </script>\n</body>\n</html>",
            "language": "js"
        },
        {
            "type": "blockquote",
            "text": "üé≠ Final Wisdom: ",
            "content": "There's no one-size-fits-all approach to JavaScript placement. Always measure performance in real-world conditions, on real devices, with real user connections!"
        },
        {
            "type": "heading-2",
            "text": "üéì Your JavaScript Placement Journey"
        },
        {
            "type": "text",
            "content": "Congratulations! You've completed the JavaScript Placement module and now understand:"
        },
        {
            "type": "unordered-list",
            "items": [
                " The different locations JavaScript can live in your web pages",
                " How script loading affects page performance",
                " Modern loading techniques like async and defer",
                " How to organize JavaScript files for optimal performance",
                " Security considerations when placing scripts",
                " Best practices for script placement in various scenarios"
            ]
        },
        {
            "type": "text",
            "content": "Remember: Where you put your JavaScript is just as important as how you write it. Happy coding! üöÄ"
        }
    ]
}