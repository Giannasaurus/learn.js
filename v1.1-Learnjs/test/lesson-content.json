[
    {
    "title": "Basics",
    "subtopics": [
      {
        "title": "Overview",
        "sections": [
          {
            "type": "heading-2",
            "text": "üåü Module Overview"
          },
          {
            "type": "text",
            "content": "Welcome to the wonderful world of JavaScript! This lesson module will take you on an adventure through JavaScript's core concepts with a fun, engaging approach. By the end of this module, you'll understand what makes JavaScript tick and be ready to start coding your own interactive web experiences."
          },
          {
            "type": "heading-2",
            "text": "üß© What is JavaScript?"
          },
          {
            "type": "text",
            "content": "JavaScript is the playful spirit of the web! While HTML provides structure and CSS handles style, JavaScript brings websites to life with:"
          },
          {
            "type": "list",
            "items": [
              "‚Ä£ Interactivity: Respond to user clicks, typing, and other actions",
              "‚Ä£ Dynamic content: Change webpage content on the fly",
              "‚Ä£ Animated effects: Create movement and visual flair",
              "‚Ä£ Data processing: Handle information without reloading the page"
            ]
          },
          {
            "type": "heading-2",
            "text": "üé≠ Fun Fact: The 10-Day Creation"
          },
          {
            "type": "text",
            "content": "JavaScript was famously created in just 10 days in May 1995 by Brendan Eich while he was working at Netscape. Originally named \"Mocha,\" then briefly \"LiveScript,\" it was finally renamed \"JavaScript\" as a marketing move to capitalize on the popularity of Java (though the two languages are quite different!)."
          },
          {
            "type": "heading-2",
            "text": "üéì What's Next on Your JavaScript Journey?"
          },
          {
            "type": "text",
            "content": "After mastering these fundamentals, you can explore:"
          },
          {
            "type": "list",
            "items": [
              "‚Ä£ Asynchronous JavaScript: Promises, async/await, fetching data",
              "‚Ä£ Modern JS Frameworks: React, Vue, Angular",
              "‚Ä£ Server-side JS: Node.js",
              "‚Ä£ Mobile App Development: React Native",
              "‚Ä£ Game Development: Phaser, Three.js"
            ]
          },
          {
            "type": "heading-2",
            "text": "üìù Mini-Challenge: Test Your Knowledge"
          },
          {
            "type": "list",
            "items": [
              "1. Create a variable to store your name",
              "2. Write a function that takes your name and returns a personalized greeting",
              "3. Use an if statement to check if your name has more than 5 characters",
              "4. Create a simple loop that counts from 1 to your name's length"
            ]
          },
          {
            "type": "heading-2",
            "text": "üåà JavaScript Fun Facts"
          },
          {
            "type": "list",
            "items": [
              "‚Ä£ JavaScript has nothing to do with Java! The similar name was purely for marketing purposes.",
              "‚Ä£ Despite being created in just 10 days, JavaScript has become one of the most popular programming languages in the world.",
              "‚Ä£ The official name of JavaScript is actually ECMAScript (ES).",
              "‚Ä£ JavaScript can run not just in browsers, but also on servers, in databases, and even on IoT devices.",
              "‚Ä£ The first JavaScript engine was created in 10 days, but modern JavaScript engines like V8 (used in Chrome and Node.js) are incredibly sophisticated and fast."
            ]
          },
          {
            "type": "text",
            "content": "Happy coding! üöÄ"
          }
        ]
      },
      {
        "title": "Syntax",
        "sections": [
            {
                "type": "heading-2",
                "text": "üß≠ Welcome to the Syntax Safari!"
            },
            {
                "type": "text",
                "content": "Hello intrepid code explorer! In this adventure, we'll journey through the wild and wonderful landscape of JavaScript syntax. Pack your coding compass as we navigate through the syntax jungle, discovering the rules that make JavaScript tick!"
            },
            {
                "type": "heading-2",
                "text": "üèïÔ∏è Base Camp: Syntax Fundamentals"
            },
            {
                "type": "heading-3",
                "text": "üî§ Case Sensitivity"
            },
            {
                "type": "text",
                "content": "JavaScript is case-sensitive, which means variable, Variable, and VARIABLE are three completely different things!"
            },
            {
              "type": "code-block",
              "code": "let animal = \"tiger\";  // This is a tiger\n\nlet Animal = \"Lion\";   // This is a completely different Lion\nlet ANIMAL = \"BEAR\";   // And this is yet another BEAR\n\nconsole.log(animal);   // tiger\nconsole.log(Animal);   // Lion\nconsole.log(ANIMAL);   // BEAR",
              "language": "js"
            },
            {
              "type": "blockquote",
              "text": "üé™ Fun Fact: ",
              "content": "JavaScript's case sensitivity has caused countless hours of debugging! The most common case-related bug? Typing addeventlistener() instead of addEventListener()."
            },
            {
                "type": "heading-3",
                "text": "üìù Statements and Semicolons"
            },
            {
                "type": "text",
                "content": "JavaScript statements are like sentences in your code story:"
            },
            {
              "type": "code-block",
              "code": "let age = 25;                  // Statement 1: Variable declaration\nconsole.log(\"Hello, world!\");  // Statement 2: Function call\nif (age > 18) {                // Statement 3: Start of conditional block\n    console.log(\"Adult\");      // Statement 4: Function call inside block\n}                              // Statement 5: End of conditional block",
              "language": "js"
            },
            {
                "type": "text",
                "content": "Semicolons (;) typically mark the end of a statement, but JavaScript has \"Automatic Semicolon Insertion\" (ASI) which often adds them for you!"
            },
            {
              "type": "code-block",
              "code": "// These are equivalent in JavaScript!\nlet name = \"JavaScript\"\nlet age = 28\n\n// The same as:\nlet name = \"JavaScript\";\nlet age = 28;",
              "language": "js"
            },
            {
              "type": "blockquote",
              "text": "üé≠ Semicolon Drama: ",
              "content": "The JavaScript community had a famous \"semicolon war\" where developers heatedly debated whether to use them! Some style guides mandate them, while others forbid unnecessary ones. Choose your side wisely!"
            },
            {
                "type": "heading-3",
                "text": "üí¨ Comments: Code's Conversation"
            },
            {
                "type": "text",
                "content": "Comments let you add notes that JavaScript ignores:"
            },
            {
              "type": "code-block",
              "code": "// This is a single-line comment\n\n/* This is a multi-line comment\n   It can span several lines\n   Very useful for longer explanations */\n\n// Comments can explain WHY, not just WHAT\nlet magicNumber = 42;  // The answer to life, the universe, and everything\n\n/**\n * This is a JSDoc comment\n * @param {string} name - The person's name\n * @returns {string} A personalized greeting\n */\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}",
              "language": "js"
            },
            {
              "type": "blockquote",
              "text": "üé™ Comment Comedy: ",
              "content": "Developers sometimes leave funny comments in code. One famous one: // Dear future me, please forgive me for the code below."
            },
            {
                "type": "heading-2",
                "text": "üåã The Building Blocks: Identifiers and Keywords"
            },
            {
                "type": "heading-3",
                "text": "üè∑Ô∏è Identifiers: Naming Things"
            },
            {
                "type": "text",
                "content": "Rules for naming variables, functions, etc.:"
            },
            {
              "type": "code-block",
              "code": "// Valid identifiers\nlet userName;\nlet user_name;\nlet $specialVar;\nlet _privateVar;\nlet camelCaseIsCommon;\nlet œÄ = 3.14159;  // Yes, you can use Unicode!\n\n// Invalid identifiers\n// let 123abc;      // Can't start with a number\n// let my-variable; // Can't contain hyphens\n// let for;         // Can't use reserved keywords",
              "language": "js"
            },
            {
              "type": "blockquote",
              "text": "üéÆ Fun Challenge: ",
              "content": "JavaScript lets you use emoji as variable names! Try: let üê± = \"cat\";"
            },
            {
                "type": "heading-3",
                "text": "üîê Reserved Keywords"
            },
            {
                "type": "text",
                "content": "JavaScript has special words that have predefined meanings:"
            },
            {
              "type": "code-block",
              "code": "// These words have special meaning and can't be used as identifiers\nbreak     case      catch     class     const   \ncontinue  debugger  default   delete    do\nelse      export    extends   finally   for\nfunction  if        import    in        instanceof\nnew       return    super     switch    this\nthrow     try       typeof    var       void\nwhile     with      yield",
              "language": "js"
            },
            {
              "type": "blockquote",
              "text": "üé≠ Keyword Trivia: ",
              "content": "The keyword class wasn't actually reserved in early JavaScript despite being in the specification! This was fixed in ES2015/ES6."
            },
            {
                "type": "heading-2",
                "text": "üèûÔ∏è Valley of Variables"
            },
            {
                "type": "heading-3",
                "text": "üì¶ Variable Declarations"
            },
            {
                "type": "text",
                "content": "Three ways to create variables:"
            },
            {
                "type": "code-block",
                "code": "var oldSchool = \"I've been around since the beginning\";\nlet flexible = \"I was introduced in ES6/2015\";\nconst rockSolid = \"My value cannot be reassigned\";\n\n// var is function-scoped\nfunction varDemo() {\n    if (true) {\n        var x = 10;\n    }\n    console.log(x);  // 10 - x is visible here!\n}\n\n// let and const are block-scoped\nfunction letDemo() {\n    if (true) {\n        let y = 20;\n    }\n    // console.log(y);  // Error! y is not defined outside the block\n}\n\n// Constants must be initialized and can't be reassigned\nconst PI = 3.14159;\n// PI = 3;  // This would cause an error!\n\n// But objects assigned to constants can be modified\nconst person = { name: \"Alice\" };\nperson.name = \"Bob\";  // This works!\n// person = { name: \"Charlie\" };  // This would cause an error!",
                "language": "js"
            },
            {
                "type": "text",
                "content": "Use var for function-scoped variables, let for block-scoped variables, and const for constants that won't change."
            },
            {
              "type": "text",
              "content": "Note: var is considered outdated and should be avoided in modern JavaScript."
            },
            {
              "type": "blockquote",
              "text": "üé° Variable Fun: ",
              "content": "JavaScript developers once used a technique called \"IIFE\" (Immediately Invoked Function Expression) before let and const existed to create block-scoped variables. It looked like this: (function() { var privateVar = \"Can't touch this!\"; })();"
            },
            {
                "type": "heading-2",
                "text": "üåà Data Types Wonderland"
            },
            {
                "type": "heading-3",
                "text": "üî¢ Primitive Types"
            },
            {
                "type": "text",
                "content": "JavaScript has seven primitive data types:"
            },
            {
              "type": "code-block",
              "code": "// Number - includes integers and floating point\nlet age = 25;\nlet price = 9.99;\nlet infinity = Infinity;\nlet notANumber = NaN;  // Still a Number type!\n\n// String - text enclosed in quotes\nlet single = 'Single quotes work'\nlet double = \"Double quotes work too\";\nlet backtick = `Template literals allow ${age} to be embedded`;\n\n// Boolean - true or false\nlet isAwesome = true;\nlet isBoring = false;\n\n// Undefined - value not assigned\nlet notDefined;\nconsole.log(notDefined);  // undefined\n\n// Null - explicitly assigned \"no value\"\nlet empty = null;\n\n// Symbol - unique identifiers (ES6)\nlet uniqueKey = Symbol(\"description\");\nlet anotherKey = Symbol(\"description\");  // Different from uniqueKey!\n\n// BigInt - for very large integers (ES2020)\nlet hugeNumber = 9007199254740991n;  // Note the 'n' suffix",
              "language": "js"
            },
            {
              "type": "blockquote",
              "text": "üé™ Type Oddity: ",
              "content": "In JavaScript, typeof null returns \"object\" instead of \"null\". This is a famous bug that can never be fixed because it would break too much existing code!"
            },
            {
                "type": "heading-3",
                "text": "üß© Object Type"
            },
            {
                "type": "text",
                "content": "The object is the most versatile type:"
            },
            {
              "type": "code-block",
              "code": "// Object literals - collection of key/value pairs\nlet person = {\n    name: \"JavaScript Enthusiast\",\n    age: 5,\n    skills: [\"Problem Solving\", \"Creating Interactivity\"],\n    greet: function() {\n        return `Hi, I'm ${this.name}!`;\n    }\n};\n\n// Accessing object properties\nconsole.log(person.name);          // Dot notation\nconsole.log(person[\"age\"]);        // Bracket notation\nconsole.log(person.greet());       // Method call\n\n// Arrays - special kind of object\nlet colors = [\"red\", \"green\", \"blue\"];\nconsole.log(colors[0]);            // \"red\"\nconsole.log(colors.length);        // 3\n\n// Functions - also objects in JavaScript!\nfunction multiply(a, b) {\n    return a * b;\n}\nconsole.log(multiply(5, 6));       // 30",
              "language": "js"
            },
            {
              "type": "blockquote",
              "text": "üé° Object Trivia: ",
              "content": "JavaScript arrays are just objects with numeric property names and a special length property. You can add non-numeric properties to arrays: colors.favoriteColor = \"purple\"!"
            },
            {
                "type": "heading-2",
                "text": "üåã Expression Volcano"
            },
            {
                "type": "heading-3",
                "text": "üßÆ Arithmetic Expressions"
            },
            {
              "type": "code-block",
              "code": "let sum = 5 + 10;             // Addition: 15\nlet difference = 20 - 5;      // Subtraction: 15\nlet product = 4 * 3;          // Multiplication: 12\nlet quotient = 20 / 5;        // Division: 4\nlet remainder = 10 % 3;       // Modulus (remainder): 1\nlet power = 2 ** 3;           // Exponentiation (ES2016): 8\n\n// Increment and decrement\nlet counter = 0;\ncounter++;                    // Post-increment: counter = 1\n++counter;                    // Pre-increment: counter = 2\ncounter--;                    // Post-decrement: counter = 1\n--counter;                    // Pre-decrement: counter = 0\n\n// Assignment operators\nlet x = 10;\nx += 5;                       // x = x + 5: 15\nx -= 3;                       // x = x - 3: 12\nx *= 2;                       // x = x * 2: 24\nx /= 6;                       // x = x / 6: 4\nx %= 3;                       // x = x % 3: 1\nx **= 3;                      // x = x ** 3: 1",
              "language": "js"
            },
            {
              "type": "blockquote",
              "text": "üé¢ Math Magic: ",
              "content": "JavaScript has a native Math object with fun methods like Math.random() (gives a random number between 0 and 1) and constants like Math.PI!"
            },
            {
                "type": "heading-3",
                "text": "üßê Comparison Expressions"
            },
            {
              "type": "code-block",
              "code": "// Equality\nconsole.log(5 == 5);         // true\nconsole.log(5 == \"5\");       // true (type coercion)\nconsole.log(5 === \"5\");      // false (strict equality, no type coercion)\nconsole.log(5 != 10);        // true\nconsole.log(5 !== \"5\");      // true (strict inequality)\n\n// Relational\nconsole.log(10 > 5);         // true (greater than)\nconsole.log(5 < 10);         // true (less than)\nconsole.log(5 >= 5);         // true (greater than or equal)\nconsole.log(5 <= 10);        // true (less than or equal)\n\n// The weird parts\nconsole.log(null == undefined);  // true\nconsole.log(null === undefined); // false\nconsole.log(NaN == NaN);         // false (NaN is never equal to anything, even itself!)",
              "language": "js"
            },
            {
              "type": "blockquote",
              "text": "üé≠ Equality Drama: ",
              "content": "JavaScript's loose equality (==) has many quirky rules, which led to the creation of websites like \"JavaScript Equality Table\" that display huge matrices of what equals what!"
            },
            {
                "type": "heading-3",
                "text": "üß† Logical Expressions"
            },
            {
              "type": "code-block",
              "code": "// Logical operators\nconsole.log(true && true);   // AND: true\nconsole.log(true && false);  // AND: false\nconsole.log(true || false);  // OR: true\nconsole.log(!true);          // NOT: false\n\n// Short-circuit evaluation\nconsole.log(false && expensiveOperation());  // false, expensiveOperation never runs!\nconsole.log(true || expensiveOperation());   // true, expensiveOperation never runs!\n\n// Logical operators with non-boolean values\nconsole.log(\"hello\" && \"world\");  // \"world\" (last truthy value)\nconsole.log(\"\" && \"world\");       // \"\" (first falsy value)\nconsole.log(\"hello\" || \"world\");  // \"hello\" (first truthy value)\nconsole.log(\"\" || \"world\");       // \"world\" (first truthy value or last value)\n\n// Nullish coalescing operator (ES2020)\nlet username = null;\nconsole.log(username ?? \"Guest\");  // \"Guest\" (if left side is null/undefined)",
              "language": "js"
            },
            {
              "type": "blockquote",
              "text": "üé° Logical Fun: ",
              "content": "The && and || operators are often used for clever shortcuts. isAdmin && showSecretPanel() runs showSecretPanel() only if isAdmin is true!"
            },
            {
                "type": "heading-2",
                "text": "üè∞ Control Flow Castle"
            },
            {
                "type": "heading-3",
                "text": "üîÄ If/Else Statements"
            },
            {
              "type": "code-block",
              "code": "// Basic if\nif (age >= 18) {\n    console.log(\"Adult\");\n}\n\n// If/else\nif (temperature > 30) {\n    console.log(\"It's hot!\");\n} else {\n    console.log(\"It's not too hot.\");\n}\n\n// If/else if/else\nif (score >= 90) {\n    console.log(\"A grade\");\n} else if (score >= 80) {\n    console.log(\"B grade\");\n} else if (score >= 70) {\n    console.log(\"C grade\");\n} else {\n    console.log(\"Needs improvement\");\n}\n\n// Conditional (ternary) operator\nlet status = age >= 18 ? \"Adult\" : \"Minor\";",
              "language": "js"
            }
        ]
      },
      {
        "title": "Placement",
        "sections": []
      },
      {
        "title": "Variables",
        "sections": []
      },
      {
        "title": "Operators",
        "sections": []
      },
      {
        "title": "If-Else",
        "sections": []
      },
      {
        "title": "Switch Case",
        "sections": []
      },
      {
        "title": "While Loop",
        "sections": []
      }

    ]
  }
]